{"version":3,"sources":["EmplTable.js","App.js","index.js","serviceWorker.js"],"names":["EmplTable","props","employeeListTable","employeeList","map","employee","key","id","firstName","lastName","department","title","className","onChange","runOrderBy","type","name","action","htmlFor","autoComplete","value","filterText","applyFilter","App","useState","setEmployeeList","setFilterText","e","sortedList","target","sort","a","b","filteredList","lcText","toLowerCase","length","filter","search","Boolean","window","location","hostname","match","localStorage","getItem","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2456af7b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function EmplTable(props) {\n    const employeeListTable = props.employeeList.map(employee => (\n        <tr key={employee.id} id={employee.id}>\n            <td>{employee.id}</td>\n            <td>{employee.firstName}</td>\n            <td>{employee.lastName}</td>\n            <td>{employee.department}</td>\n            <td>{employee.title}</td>\n        </tr>\n    ));\n    return (\n        <div>\n            <label>Order By: </label>\n            <label className=\"radio-inline\"><input onChange={props.runOrderBy} type=\"radio\" name=\"optradio\" id=\"orderById\"></input>Id</label>\n            <label className=\"radio-inline\"><input onChange={props.runOrderBy} type=\"radio\" name=\"optradio\" id=\"orderByFirstName\"></input>First Name </label>\n            <label className=\"radio-inline\"><input onChange={props.runOrderBy} type=\"radio\" name=\"optradio\" id=\"orderByLastName\"></input> Last Name </label>\n            <form className=\"form-inline\" action=\"/action_page.php\">\n                <label htmlFor=\"filterByName\">First and/or last name to be searched (Or part of it):</label>\n                <input\n                    type=\"text\"\n                    id=\"filterByName\"\n                    name=\"filterByName\"\n                    autoComplete=\"off\"\n                    value={props.filterText}\n                    onChange={props.applyFilter}>\n                </input>\n            </form>\n            <hr></hr>\n            <table className=\"table table-sm table-dark\">\n                <thead>\n                    <tr>\n                        <th>Id</th>\n                        <th>First Name</th>\n                        <th>Last Name</th>\n                        <th>Department</th>\n                        <th>Title</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {employeeListTable}\n                </tbody>\n            </table>\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport EmplTable from './EmplTable';\n\nfunction App(props) {\n  const [employeeList, setEmployeeList] = useState(props.employeeList);\n  const [filterText, setFilterText] = useState('');\n  var runOrderBy = (e) => {\n    var sortedList;\n    if (e.target.id === \"orderByFirstName\") {\n      sortedList = employeeList.sort((a, b) => a.firstName > b.firstName ? 1 : a.firstName < b.firstName ? -1 : 0);\n    } else if (e.target.id === \"orderByLastName\") {\n      sortedList = employeeList.sort((a, b) => a.lastName > b.lastName ? 1 : a.lastName < b.lastName ? -1 : 0);\n    } else {\n      sortedList = employeeList.sort((a, b) => a.id > b.id ? 1 : a.id < b.id ? -1 : 0);\n    }\n    setEmployeeList([...sortedList]);\n  };\n  var applyFilter = (e) => {\n    var filteredList;\n    setFilterText(e.target.value);\n    var lcText = e.target.value.toLowerCase();\n    filteredList = props.employeeList;\n    if (e.target.value.length > 0) {\n      filteredList = employeeList.filter((employee) => { return employee.firstName.toLowerCase().search(lcText) !== -1 || employee.lastName.toLowerCase().search(lcText) !== -1});\n    }\n    setEmployeeList([...filteredList]);\n  }\n  return (\n    <div>\n      <header className=\"App-header\">\n        <h1 className=\"text-center\">Employee Directory</h1>\n      </header>\n      <article>\n        <EmplTable employeeList={employeeList} runOrderBy={runOrderBy} applyFilter={applyFilter} filterText={filterText}/>\n      </article>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nvar employeeList;\n\nif (!localStorage.getItem(\"employeeList\")) {\n  employeeList = [\n    { id: \"empl-1\", firstName: \"Jhon\", lastName: \"Snow\", department: \"Marketing\", title: \"Manager\" },\n    { id: \"empl-2\", firstName: \"Peter\", lastName: \"Pan\", department: \"Sales\", title: \"Sales Manager\" },\n    { id: \"empl-3\", firstName: \"Aria\", lastName: \"Stark\", department: \"Accounts Payable\", title: \"Manager\" },\n    { id: \"empl-4\", firstName: \"David\", lastName: \"Benner\", department: \"Sales\", title: \"Vendor\" },\n    { id: \"empl-5\", firstName: \"Donald\", lastName: \"Duck\", department: \"IT\", title: \"Java Developer\" },\n    { id: \"empl-6\", firstName: \"Mickey\", lastName: \"Mouse\", department: \"IT\", title: \"React Developer\" },\n    { id: \"empl-7\", firstName: \"Laura\", lastName: \"Croft\", department: \"Finance\", title: \"Director\" },\n    { id: \"empl-8\", firstName: \"Bruce\", lastName: \"Wayne\", department: \"Finance\", title: \"Manager\" },\n    { id: \"empl-9\", firstName: \"Snow\", lastName: \"White\", department: \"IT\", title: \"Director\" },\n  ]\n} else {\n  employeeList = localStorage.getItem(\"employeeList\");\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App employeeList={employeeList} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}